name: release

on:
  workflow_dispatch:

jobs:
  get_version_from_branch_name:
    runs-on: ubuntu-latest
    environment:
      name: release
    outputs:
      release_version: ${{ steps.get_version.outputs.release_version }}
    steps:
      - name: Get version from branch name
        id: get_version
        run: |
          branch_name=${{ github.ref_name }}
          release_version="${branch_name##release/}"
          if [ "${release_version}" == "${branch_name}" ]; then
            echo "Invalid branch name: ${branch_name}"
          else
            echo "Release version: ${release_version}"
            echo "release_version=${release_version}" >> $GITHUB_OUTPUT
          fi

  pypi_version:
    runs-on: ubuntu-latest
    environment:
      name: release
    outputs:
      pypi_version: ${{ steps.get_pypi_version.outputs.pypi_version }}
    steps:
      - name: Fetch information from PyPI
        id: get_pypi_version
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ github.event.repository.name }}/json || echo "{}")
          pypi_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$pypi_version" ]; then
            echo "Package not found on PyPI."
            pypi_version="0.0.0"
          fi
          echo "Latest version on PyPI: $pypi_version"
          echo "pypi_version=$pypi_version" >> $GITHUB_OUTPUT

  build_package:
    needs: [get_version_from_branch_name, pypi_version]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Hatch
        run: |
          python -m pip install --upgrade pip setuptools wheel hatch

      - name: Compare current version with PyPI version
        id: version
        run: |
          release_version=${{ needs.get_version_from_branch_name.outputs.release_version }}
          pypi_version=${{ needs.pypi_version.outputs.pypi_version }}
          repo_version=$(hatch version)
          
          if [ "$release_version" == "$pypi_version" ]; then
            echo "No version update. Terminating workflow".
            exit 0
          fi
          
          higher_version=$(printf '%s\n' "$release_version" "$pypi_version" | sort -rV | head -n 1)
          if [ "$higher_version" != "$release_version" ]; then
            echo "Error! Version ${release_version} is lower than latest version ${pypi_version} on PyPI"
            exit 1
          else
            echo "The release version ${release_version} is greater than the latest version ${pypi_version} on PyPI."
          fi
          
          if [ "${release_version}" != "${repo_version}" ]; then
            higher_version=$(printf '%s\n' "$release_version" "$repo_version" | sort -rV | head -n 1)
            if [ "$higher_version" != "$release_version" ]; then
              echo "Error! Version ${release_version} is lower than repository version ${repo_version}"
              exit 1
            fi
            echo "Repository version was ${repo_version}. Updating to ${release_version}"
            hatch version "${release_version}"
            echo "Repository version is now $(hatch version)"
          fi

          echo "release_version=${release_version}" >> $GITHUB_OUTPUT


      - name: Build source and wheel distribution
        if: ${{ steps.version.outputs.release_version }}
        run: |
          hatch build

      - name: Upload artifacts
        if: ${{ steps.version.outputs.release_version }}
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  github_tag:
    name: Create GitHub tag
    needs: [build_package]
    if: ${{ needs.build_package.outputs.release_version }}
    outputs:
      tag_name: ${{ steps.construct_tag_name.outputs.tag_name }}
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - name: Construct tag name
        id: construct_tag_name
        run: |
          tag_name=v${{ needs.build_package.outputs.release_version }}
          echo "Making new tag ${tag_name}"
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.construct_tag_name.outputs.tag_name }}',
              sha: context.sha
            })

  github_release:
    name: Create GitHub Release
    needs: [github_tag]
    if: ${{ needs.github_tag.outputs.tag_name }}
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag_name=${{ needs.github_tag.outputs.tag_name }}
          gh release create ${tag_name} dist/* --title "Release ${tag_name}" --notes-file CHANGELOG.md

  pypi_publish:
    name: Upload release to PyPI
    needs: [github_release, github_tag]
    if: ${{ needs.github_tag.outputs.tag_name }}
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https:/pypi.org/p/sliplib
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
